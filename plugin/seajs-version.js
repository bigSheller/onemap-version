const generator = require("@babel/generator");
const parser = require("@babel/parser");
const traverse = require("@babel/traverse");
const types = require("@babel/types");
function generatorConfigAst(opts){
    let exclude = opts.excludeLinks
    let excludeItemJson = "{\n" +
    "        \"type\": \"StringLiteral\",\n" +
    "        \"value\": \"a.js\"\n" +
    "    }"
    const configVarName = '_v_'+Math.random().toString().slice(-6);
    const configMapFuncName = '_f_'+Math.random().toString().slice(-6);
    let astTemplate = `[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"${configVarName}\"},\"init\":{\"type\":\"Identifier\",\"name\":\"a\"}}],\"kind\":\"var\"},{\"type\":\"FunctionDeclaration\",\"id\":{\"type\":\"Identifier\",\"name\":\"${configMapFuncName}\"},\"generator\":false,\"async\":false,\"params\":[{\"type\":\"Identifier\",\"name\":\"url\"}],\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"re\"},\"init\":{\"type\":\"NewExpression\",\"callee\":{\"type\":\"Identifier\",\"name\":\"RegExp\"},\"arguments\":[{\"type\":\"StringLiteral\",\"extra\":{\"rawValue\":\"(.+\\\\.(js|css|html))(\\\\?.*)*$\",\"raw\":\"'(.+\\\\\\\\.(js|css|html))(\\\\\\\\?.*)*$'\"},\"value\":\"(.+\\\\.(js|css|html))(\\\\?.*)*$\"},{\"type\":\"StringLiteral\",\"extra\":{\"rawValue\":\"ig\",\"raw\":\"'ig'\"},\"value\":\"ig\"}]}}],\"kind\":\"var\"},{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"exclude\"},\"init\":{\"type\":\"ArrayExpression\",\"elements\":[]}}],\"kind\":\"var\"},{\"type\":\"IfStatement\",\"test\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"re\"},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"test\"}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"url\"}]},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"path\"},\"init\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"RegExp\"},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"$1\"}}}],\"kind\":\"var\"},{\"type\":\"ForStatement\",\"init\":{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"i\"},\"init\":{\"type\":\"NumericLiteral\",\"extra\":{\"rawValue\":0,\"raw\":\"0\"},\"value\":0}}],\"kind\":\"var\"},\"test\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"Identifier\",\"name\":\"i\"},\"operator\":\"<\",\"right\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"exclude\"},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"length\"}}},\"update\":{\"type\":\"UpdateExpression\",\"operator\":\"++\",\"prefix\":true,\"argument\":{\"type\":\"Identifier\",\"name\":\"i\"}},\"body\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"IfStatement\",\"test\":{\"type\":\"LogicalExpression\",\"left\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"exclude\"},\"computed\":true,\"property\":{\"type\":\"Identifier\",\"name\":\"i\"}},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"trim\"}},\"arguments\":[]},\"operator\":\"!=\",\"right\":{\"type\":\"StringLiteral\",\"extra\":{\"rawValue\":\"\",\"raw\":\"''\"},\"value\":\"\"}},\"operator\":\"&&\",\"right\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"path\"},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"endsWith\"}},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"exclude\"},\"computed\":true,\"property\":{\"type\":\"Identifier\",\"name\":\"i\"}}]}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"url\"}}],\"directives\":[]},\"alternate\":null}],\"directives\":[]}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"url\"},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"indexOf\"}},\"arguments\":[{\"type\":\"StringLiteral\",\"extra\":{\"rawValue\":\"?\",\"raw\":\"\\\"?\\\"\"},\"value\":\"?\"}]},\"operator\":\"!=\",\"right\":{\"type\":\"UnaryExpression\",\"operator\":\"-\",\"prefix\":true,\"argument\":{\"type\":\"NumericLiteral\",\"extra\":{\"rawValue\":1,\"raw\":\"1\"},\"value\":1}}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"VariableDeclaration\",\"declarations\":[{\"type\":\"VariableDeclarator\",\"id\":{\"type\":\"Identifier\",\"name\":\"end\"},\"init\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"url\"},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"substring\"}},\"arguments\":[{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"url\"},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"indexOf\"}},\"arguments\":[{\"type\":\"StringLiteral\",\"extra\":{\"rawValue\":\"?\",\"raw\":\"\\\"?\\\"\"},\"value\":\"?\"}]},\"operator\":\"+\",\"right\":{\"type\":\"NumericLiteral\",\"extra\":{\"rawValue\":1,\"raw\":\"1\"},\"value\":1}}]}}],\"kind\":\"var\"},{\"type\":\"IfStatement\",\"test\":{\"type\":\"UnaryExpression\",\"operator\":\"!\",\"prefix\":true,\"argument\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"end\"},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"includes\"}},\"arguments\":[{\"type\":\"StringLiteral\",\"extra\":{\"rawValue\":\"${opts.paramName}=${opts.version}\",\"raw\":\"'${opts.paramName}=${opts.version}'\"},\"value\":\"${opts.paramName}=${opts.version}\"}]}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"Identifier\",\"name\":\"url\"},\"right\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"url\"},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"substring\"}},\"arguments\":[{\"type\":\"NumericLiteral\",\"extra\":{\"rawValue\":0,\"raw\":\"0\"},\"value\":0},{\"type\":\"BinaryExpression\",\"left\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"url\"},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"indexOf\"}},\"arguments\":[{\"type\":\"StringLiteral\",\"extra\":{\"rawValue\":\"?\",\"raw\":\"\\\"?\\\"\"},\"value\":\"?\"}]},\"operator\":\"+\",\"right\":{\"type\":\"NumericLiteral\",\"extra\":{\"rawValue\":1,\"raw\":\"1\"},\"value\":1}}]},\"operator\":\"+\",\"right\":{\"type\":\"StringLiteral\",\"extra\":{\"rawValue\":\"${opts.paramName}=${opts.version}f&\",\"raw\":\"'${opts.paramName}=${opts.version}f&'\"},\"value\":\"${opts.paramName}=${opts.version}f&\"}},\"operator\":\"+\",\"right\":{\"type\":\"Identifier\",\"name\":\"end\"}}}}],\"directives\":[]},\"alternate\":null}],\"directives\":[]},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"+=\",\"left\":{\"type\":\"Identifier\",\"name\":\"url\"},\"right\":{\"type\":\"StringLiteral\",\"extra\":{\"rawValue\":\"?${opts.paramName}=${opts.version}f\",\"raw\":\"'?${opts.paramName}=${opts.version}f'\"},\"value\":\"?${opts.paramName}=${opts.version}f\"}}}],\"directives\":[]}}],\"directives\":[]},\"alternate\":null},{\"type\":\"ReturnStatement\",\"argument\":{\"type\":\"Identifier\",\"name\":\"url\"}}],\"directives\":[]}},{\"type\":\"IfStatement\",\"test\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"${configVarName}\"},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"map\"}},\"consequent\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"${configVarName}\"},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"map\"}},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"push\"}},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"${configMapFuncName}\"}]}}],\"directives\":[]},\"alternate\":{\"type\":\"BlockStatement\",\"body\":[{\"type\":\"ExpressionStatement\",\"expression\":{\"type\":\"AssignmentExpression\",\"operator\":\"=\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"${configVarName}\"},\"computed\":false,\"property\":{\"type\":\"Identifier\",\"name\":\"map\"}},\"right\":{\"type\":\"ArrayExpression\",\"elements\":[{\"type\":\"Identifier\",\"name\":\"${configMapFuncName}\"}]}}}],\"directives\":[]}}]`
    let re = JSON.parse(astTemplate);
    for(item in  exclude){
        let excludeItem = JSON.parse(excludeItemJson)
        excludeItem.value = exclude[item];
        re[1].body.body[1].declarations[0].init.elements.push(excludeItem)
    }
    console.log(re[1].body.body[1].declarations[0].init.elements)
    return re;
}
function compile(code,opts) {
    // 1.parse 将代码解析为抽象语法树（AST）
    const ast = parser.parse(code);
    const visitor = {
        CallExpression:{
            exit(path, state)  {
                const { callee } = path.node;
                const isSeajsConfig =
                    types.isMemberExpression(callee) &&
                    callee.object.name === "seajs" &&
                    callee.property.name === "config";
                if (isSeajsConfig) {
                    const parent = path.parentPath;
                    const configAst = generatorConfigAst(opts);
                    configAst[0].declarations[0].init = path.node.arguments[0];
                    path.node.arguments = [JSON.parse(JSON.stringify(configAst[0].declarations[0].id)) ]
                    console.log(parent.node.arguments)
                    parent.insertBefore(configAst[0])
                    parent.insertBefore(configAst[1])
                    parent.insertBefore(configAst[2])
                }
            },
        }
    };
    // 2,traverse 转换代码
    traverse.default(ast, visitor);
    // 3. generator 将 AST 转回成代码
    return generator.default(ast, {}, code).code;
}
module.exports = compile